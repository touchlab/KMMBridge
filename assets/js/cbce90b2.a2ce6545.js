"use strict";(self.webpackChunktouchlab=self.webpackChunktouchlab||[]).push([[6864],{6307:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"0.3.x","label":"0.3.x","banner":"unmaintained","badge":true,"noIndex":false,"className":"docs-version-0.3.x","isLast":false,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"KMMBridge Intro","href":"/docs/0.3.x/","docId":"index"},{"type":"link","label":"Default GitHub Workflow","href":"/docs/0.3.x/DEFAULT_GITHUB_FLOW","docId":"DEFAULT_GITHUB_FLOW"},{"type":"link","label":"iOS Dev Setup","href":"/docs/0.3.x/IOS_DEV_SETUP","docId":"IOS_DEV_SETUP"},{"type":"link","label":"Troubleshooting","href":"/docs/0.3.x/TROUBLESHOOTING","docId":"TROUBLESHOOTING"},{"type":"category","label":"General Documentation","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Configuration Overview","href":"/docs/0.3.x/general/CONFIGURATION_OVERVIEW","docId":"general/CONFIGURATION_OVERVIEW"},{"type":"link","label":"Android Versioning","href":"/docs/0.3.x/general/ANDROID_VERSIONING","docId":"general/ANDROID_VERSIONING"},{"type":"link","label":"Groovy Build Scripts","href":"/docs/0.3.x/general/GROOVY_BUILD_SCRIPTS","docId":"general/GROOVY_BUILD_SCRIPTS"}],"href":"/docs/0.3.x/category/general-documentation"},{"type":"category","label":"Artifact Managers","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Maven Repository Artifacts","href":"/docs/0.3.x/artifacts/MAVEN_REPO_ARTIFACTS","docId":"artifacts/MAVEN_REPO_ARTIFACTS"},{"type":"link","label":"S3 Public Artifacts","href":"/docs/0.3.x/artifacts/S3_PUBLIC_ARTIFACTS","docId":"artifacts/S3_PUBLIC_ARTIFACTS"},{"type":"link","label":"JetBrains Space Artifacts","href":"/docs/0.3.x/artifacts/SPACE_ARTIFACTS","docId":"artifacts/SPACE_ARTIFACTS"},{"type":"link","label":"Artifactory Artifacts","href":"/docs/0.3.x/artifacts/ARTIFACTORY_ARTIFACTS","docId":"artifacts/ARTIFACTORY_ARTIFACTS"}],"href":"/docs/0.3.x/category/artifact-managers"},{"type":"category","label":"CI Configuration","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Calling our GitHub Actions Workflow","href":"/docs/0.3.x/ciconfig/GITHUB_ACTIONS","docId":"ciconfig/GITHUB_ACTIONS"}],"href":"/docs/0.3.x/category/ci-configuration"},{"type":"category","label":"CocoaPods","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Using CocoaPods","href":"/docs/0.3.x/cocoapods/IOS_COCOAPODS","docId":"cocoapods/IOS_COCOAPODS"},{"type":"link","label":"CocoaPods Local Dev Flow","href":"/docs/0.3.x/cocoapods/IOS_LOCAL_DEV_COCOAPODS","docId":"cocoapods/IOS_LOCAL_DEV_COCOAPODS"},{"type":"link","label":"Publishing Podspecs to GitHub","href":"/docs/0.3.x/cocoapods/COCOAPODS_GITHUB_PODSPEC","docId":"cocoapods/COCOAPODS_GITHUB_PODSPEC"}],"href":"/docs/0.3.x/category/cocoapods"},{"type":"category","label":"Swift Package Manager (SPM)","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Using Swift Package Manager","href":"/docs/0.3.x/spm/IOS_SPM","docId":"spm/IOS_SPM"},{"type":"link","label":"SPM Local Dev Flow","href":"/docs/0.3.x/spm/IOS_LOCAL_DEV_SPM","docId":"spm/IOS_LOCAL_DEV_SPM"}],"href":"/docs/0.3.x/category/swift-package-manager-spm"}]},"docs":{"artifacts/ARTIFACTORY_ARTIFACTS":{"id":"artifacts/ARTIFACTORY_ARTIFACTS","title":"Artifactory Artifacts","description":"If you\'re using Artifactory to store artifacts, you just have to set up a repo on Artifactory and add your repo url and credentials in the","sidebar":"tutorialSidebar"},"artifacts/MAVEN_REPO_ARTIFACTS":{"id":"artifacts/MAVEN_REPO_ARTIFACTS","title":"Maven Repository Artifacts","description":"You can use a \\"standard\\" Maven repository to store your KMMBridge zip artifact. This will push the XCFramework zip archive to a standard maven/gradle endpoint. Using this artifact storage method allows for a wider range of publication possibilities, and utilizes standard Gradle publishing config.","sidebar":"tutorialSidebar"},"artifacts/S3_PUBLIC_ARTIFACTS":{"id":"artifacts/S3_PUBLIC_ARTIFACTS","title":"S3 Public Artifacts","description":"You can publish artifacts to AWS S3. However, there is no easy way to make them private using auth options available out of the box for S3. Therefore, artifacts in S3 will have publicly readable URL\'s. Those URL\'s are generated with a random UUID, so they\'re essentially unguessable, but that\'s an important restriction.","sidebar":"tutorialSidebar"},"artifacts/SPACE_ARTIFACTS":{"id":"artifacts/SPACE_ARTIFACTS","title":"JetBrains Space Artifacts","description":"If you\'re using JetBrains Space to store artifacts, you just have to set up a repo on Space and add your repo url and credentials in the","sidebar":"tutorialSidebar"},"ciconfig/GITHUB_ACTIONS":{"id":"ciconfig/GITHUB_ACTIONS","title":"Calling our GitHub Actions Workflow","description":"You can easily configure GitHub Actions to run and publish builds. We have a set of external workflows that your project","sidebar":"tutorialSidebar"},"cocoapods/COCOAPODS_GITHUB_PODSPEC":{"id":"cocoapods/COCOAPODS_GITHUB_PODSPEC","title":"Publishing Podspecs to GitHub","description":"CocoaPods supports hosting private podspec repos. These are Git repos that only host release publishing info for","sidebar":"tutorialSidebar"},"cocoapods/IOS_COCOAPODS":{"id":"cocoapods/IOS_COCOAPODS","title":"Using CocoaPods","description":"You\'ll need an Xcode project with CocoaPods set up. That means you\'ll have a Podfile that you can edit with the necessary code to integrate your Kotlin module.","sidebar":"tutorialSidebar"},"cocoapods/IOS_LOCAL_DEV_COCOAPODS":{"id":"cocoapods/IOS_LOCAL_DEV_COCOAPODS","title":"CocoaPods Local Dev Flow","description":"After you have integrated CocoaPods into Xcode, you can run local dev builds by adding the Kotlin code as a local dev Cocoapod.","sidebar":"tutorialSidebar"},"DEFAULT_GITHUB_FLOW":{"id":"DEFAULT_GITHUB_FLOW","title":"Default GitHub Workflow","description":"If you are hosting your repos in GitHub and can use GitHub Actions for CI, the Default GitHub Flow is the simplest way to start publishing Kotlin builds for iOS.","sidebar":"tutorialSidebar"},"general/ANDROID_VERSIONING":{"id":"general/ANDROID_VERSIONING","title":"Android Versioning","description":"KMMBridge is primarily a tool for managing KMM publications for iOS. It does not implicitly do any Android publication, but it\'s reasonable for a team to desire to publish both iOS and Android simultaneously. Accomplishing that simply comes down to updating your CI workflows to also run the appropriate android publish tasks.","sidebar":"tutorialSidebar"},"general/CONFIGURATION_OVERVIEW":{"id":"general/CONFIGURATION_OVERVIEW","title":"Configuration Overview","description":"Workflow Configuration","sidebar":"tutorialSidebar"},"general/GROOVY_BUILD_SCRIPTS":{"id":"general/GROOVY_BUILD_SCRIPTS","title":"Groovy Build Scripts","description":"KMMBridge was written and tested with Kotlin Gradle scripts. It\'s possible to use from Groovy, but most syntax is less","sidebar":"tutorialSidebar"},"index":{"id":"index","title":"KMMBridge Intro","description":"KMMBridge is a set of Gradle tooling that facilitates publishing and consuming pre-built KMM (Kotlin Multiplatform Mobile) Xcode Framework binaries.","sidebar":"tutorialSidebar"},"IOS_DEV_SETUP":{"id":"IOS_DEV_SETUP","title":"iOS Dev Setup","description":"To use the published Xcode Framework, you\'ll need to integrate it into your Xcode project. You\'ll also need to understand how to add authentication information, if required by your artifact storage.","sidebar":"tutorialSidebar"},"spm/IOS_LOCAL_DEV_SPM":{"id":"spm/IOS_LOCAL_DEV_SPM","title":"SPM Local Dev Flow","description":"After you have integrated your Kotlin module into Xcode using SPM, you may want to locally build and test your Kotlin code when making changes.","sidebar":"tutorialSidebar"},"spm/IOS_SPM":{"id":"spm/IOS_SPM","title":"Using Swift Package Manager","description":"Swift Package Manager is a newer dependency manager directly from Apple. In some ways it\'s more integrated into Xcode, but is also less flexible than CocoaPods. Much of that seems by design, as it\'s very difficult to introduce side effects into the Package.swift build scripts. While that is likely to result in more reliable builds for the average Xcode project, for Kotlin builds, that means some more manual processes at present.","sidebar":"tutorialSidebar"},"TROUBLESHOOTING":{"id":"TROUBLESHOOTING","title":"Troubleshooting","description":"Error: \\"This fat framework already has a binary for architecture x64 (common for target ios_x64) (or similar for arm)\\"","sidebar":"tutorialSidebar"}}}')}}]);